generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @unique
  name           String
  email          String    @unique
  username       String    @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String
  coverPhoto     String?

  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdmin   Boolean  @default(false)

  tweet Tweet[]

  likedIds String[] @db.ObjectId
  likes    Tweet[]  @relation("Like", fields: [likedIds], references: [id])

  followings Follow[] @relation("Following")
  followers  Follow[] @relation("Follower")

  communities Community[]
  members     Member[]

  communityRequestIds String[]    @db.ObjectId
  communityRequests   Community[] @relation("Request", fields: [communityRequestIds], references: [id])

  blueBadgeSubscription BlueBadgeSubscription?
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followingId String @db.ObjectId
  followerId  String @db.ObjectId

  following User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  follower  User @relation(name: "Follower", fields: [followingId], references: [id], onDelete: Cascade)
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User          @relation(fields: [userId], references: [id])
  userId String        @db.ObjectId
  role   CommunityRole @default(MEMBER)

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String    @db.ObjectId
}

model Community {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  coverPhoto String
  rules      String[]
  type       CommunityType

  creaater  User?   @relation(fields: [createrId], references: [id])
  createrId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
  tweets  Tweet[]

  requestedUserIds String[] @db.ObjectId
  requestedUsers   User[]   @relation("Request", fields: [requestedUserIds], references: [id])
}

model Tweet {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  caption String
  media   String[]
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @db.ObjectId

  retweets Tweet[] @relation("Retweets")
  tweet    Tweet?  @relation("Retweets", fields: [tweetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tweetId  String? @db.ObjectId

  isRetweet   Boolean @default(false)
  isReply     Boolean @default(false)
  isQuote     Boolean @default(false)
  isCommunity Boolean @default(false)

  likedUserIds String[] @db.ObjectId
  likes        User[]   @relation("Like", fields: [likedUserIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?    @db.ObjectId
}

model BlueBadgeSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique @db.ObjectId
  user                   User      @relation(fields: [userId], references: [id])
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map(name: "stripe_current_period_end")
}

enum CommunityRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum CommunityType {
  PUBLIC
  PRIVATE
}
